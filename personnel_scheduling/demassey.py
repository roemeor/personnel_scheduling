# AUTOGENERATED! DO NOT EDIT! File to edit: 01_demassey.ipynb (unless otherwise specified).

__all__ = ['DemasseyInstance']

# Cell

import os

import numpy as np

from .data_structures import *


from collections import namedtuple

from box import Box
from dataclasses import dataclass, field

# Cell

class DemasseyInstance():

    def __init__(self, filename):

        self.instance_name = filename[filename.rfind('/')+1:-4]

        with open(filename) as f:
            self.number_of_periods = int(f.readline())
            self.max_work_periods_per_shift = int(f.readline())
            self.number_of_days_in_horizon = int(f.readline())
            self.is_continous = int(f.readline())
            self.instance_version = int(f.readline())
            self.meaningless_parameter = int(f.readline())
            self.number_of_employees =int(f.readline()[5:])
            self.skills = ([int(n) for n in f.readline()[:-1].split()])
            self.number_of_activities = int(f.readline()[4:])

            line_ints = [int(n) for n in f.readline()[:-1].split()]

            self.min_cons_periods = line_ints[0]
            self.max_cons_periods = line_ints[1]
            self.cost_per_activity_assignment = line_ints[2]

            self.activity_data = []

            for act in range(self.number_of_activities):
                self.activity_data.append( Box() )
                self.activity_data[act].demand = ([int(n) for n in f.readline()[:-1].split()])
                self.activity_data[act].over_covering_cost = ([int(n) for n in f.readline()[:-1].split()])
                self.activity_data[act].under_covering_cost = ([int(n) for n in f.readline()[:-1].split()])
                self.activity_data[act].demand_2 = ([int(n) for n in f.readline()[:-1].split()])
                f.readline()


    def get_aggregated_demand_per_period(self):
        demand_per_period = []
        for p in range(self.number_of_periods):
            demand = 0
            for act in range(self.number_of_activities):
                demand = demand + self.activity_data[act].demand[p]

            demand_per_period.append(demand)

        return demand_per_period

    def get_activity_demands_per_period(self):
        demands = []

        for activity in range(self.number_of_activities):
            demands.append(self.activity_data[activity].demand)

        return demands


    def get_average_work_hours(self):
        return (np.sum(self.get_aggregated_demand_per_period()) / self.number_of_employees) / 4

    def get_instance_information(self):
        return f'Info: Activities: {self.number_of_activities}, Employees: {self.number_of_employees}, âŒ€ Workhours: {self.get_average_work_hours():.02f}'
